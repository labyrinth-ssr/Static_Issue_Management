INSERT INTO `sonarrules` VALUES ('common-java:Duplicat', 'Source files should not have any duplicated blocks', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S100', 'Rename this method name to match the regular expression \'^[a-z][a-zA-Z0-9]*$\'.', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S106', 'Replace this use of System.out or System.err by a logger.', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1066', 'Merge this if statement with the enclosing one.', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1068', 'Remove this unused \"code\" private field.', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1104', 'Make isOk a static final constant or non-public and provide accessors if needed.', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1110', 'Redundant pairs of parentheses should be removed', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1111', 'The Object.finalize() method should not be called', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S1113', 'The Object.finalize() method should not be overridden', 'CRITICAL', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1114', '\"super.finalize()\" should be called at the end of \"Object.finalize()\" implementations', 'CRITICAL', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S1116', 'Remove this empty statement.', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1117', 'Local variables should not shadow class fields', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1118', 'Utility classes should not have public constructors', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1119', 'Labels should not be used', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S112', 'Define and throw a dedicated exception instead of using a generic one.', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1121', 'Assignments should not be made from within sub-expressions', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1123', 'Deprecated elements should have both the annotation and the Javadoc tag', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1124', 'Modifiers should be declared in the correct order', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1125', 'Boolean literals should not be redundant', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1126', 'Replace this if-then-else statement by a single return statement.', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1128', 'Unnecessary imports should be removed', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1130', '\"throws\" declarations should not be superfluous', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1133', 'Deprecated code should be removed', 'INFO', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1134', 'Track uses of \"FIXME\" tags', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1135', 'Track uses of \"TODO\" tags', 'INFO', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1141', 'Try-catch blocks should not be nested', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1143', 'Jump statements should not occur in \"finally\" blocks', 'CRITICAL', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S1144', 'Unused \"private\" methods should be removed', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1149', 'Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S116', 'Rename this field \"user_id\" to match the regular expression \'^[a-z][a-zA-Z0-9]*$\'.', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S117', 'Rename this local variable to match the regular expression \'^[a-z][a-zA-Z0-9]*$\'.', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1172', 'Remove this unused method parameter \"registerRequest\".', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1181', 'Catch Exception instead of Throwable.', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1186', 'Add a nested comment explaining why this method is empty, throw an UnsupportedOperationException or complete the implementation.', 'CRITICAL', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1197', 'Move the array designators [] to the type.', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S120', 'Rename this package name to match the regular expression \'^[a-z_]+(\\.[a-z_][a-z0-9_]*)*$\'.', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1220', 'Move this file to a named package.', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S125', 'This block of commented-out lines of code should be removed.', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1264', 'A \"while\" loop should be used instead of a \"for\" loop', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1444', 'Make this \"public static LCHInterceptor\" field final', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1479', '\"switch\" statements should not have too many \"case\" clauses', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1481', 'Remove this unused \"role\" local variable.', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1488', 'Local variables should not be declared and then immediately returned or thrown', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1596', '\"Collections.EMPTY_LIST\", \"EMPTY_MAP\", and \"EMPTY_SET\" should not be used', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1598', 'Package declaration should match source file directory', 'CRITICAL', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S1854', 'Remove this useless assignment to local variable \"role\".', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S2093', 'Change this \"try\" to a try-with-resources. (sonar.java.source not set. Assuming 7 or greater.)', 'CRITICAL', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S2095', 'Use try-with-resources or close this \"ReadableByteChannel\" in a \"finally\" clause.', 'BLOCKER', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2109', 'Reflection should not be used to check non-runtime annotations', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2110', 'Invalid \"Date\" values should not be used', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2111', '\"BigDecimal(double)\" should not be used', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2112', '\"URL.hashCode\" and \"URL.equals\" should be avoided', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S2114', 'Collections should not be passed as arguments to their own methods', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2115', 'A secure password should be used when connecting to a database', 'BLOCKER', 'java', 'VULNERABILITY');
INSERT INTO `sonarrules` VALUES ('java:S2116', '\"hashCode\" and \"toString\" should not be called on array instances', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2118', 'Non-serializable classes should not be written', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2119', '\"Random\" objects should be reused', 'CRITICAL', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2200', '\"compareTo\" results should not be checked for specific values', 'MINOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2201', 'Return values from functions without side effects should not be ignored', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2204', '\".equals()\" should not be used to test the values of \"Atomic\" classes', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2209', '\"static\" members should be accessed statically', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S2222', 'Locks should be released', 'CRITICAL', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2225', '\"toString()\" and \"clone()\" methods should not return null', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2226', 'Servlets should not have mutable instance fields', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2229', 'Methods should not call same-class methods with incompatible \"@Transactional\" values', 'BLOCKER', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2230', 'Non-public methods should not be \"@Transactional\"', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2232', '\"ResultSet.isLast()\" should not be used', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S2234', 'Parameters should be passed in the correct order', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S2235', 'IllegalMonitorStateException should not be caught', 'CRITICAL', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S2236', 'Methods \"wait(...)\", \"notify()\" and \"notifyAll()\" should not be called on Thread instances', 'BLOCKER', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2326', 'Unused type parameters should be removed', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S2440', 'Classes with only \"static\" methods should not be instantiated', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S2441', 'Non-serializable objects should not be stored in \"HttpSession\" objects', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2442', '\"Lock\" objects should not be \"synchronized\"', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S2445', 'Blocks should be synchronized on \"private final\" fields', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2446', '\"notifyAll\" should be used', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2447', 'Null should not be returned from a \"Boolean\" method', 'CRITICAL', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S2479', 'Whitespace and control characters in literals should be explicit', 'CRITICAL', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S2583', 'Conditionally executed code should be reachable', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2589', 'Boolean expressions should not be gratuitous', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S2681', 'Multiline blocks should be enclosed in curly braces', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S2689', 'Files opened in append mode should not be used with ObjectOutputStream', 'BLOCKER', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2692', '\"indexOf\" checks should not be for positive numbers', 'CRITICAL', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S2695', '\"PreparedStatement\" and \"ResultSet\" methods should be called with valid indices', 'BLOCKER', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S2696', 'Make the enclosing method \"static\" or remove this set.', 'CRITICAL', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S2699', 'Tests should include assertions', 'BLOCKER', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S3008', 'Rename this field \"LCHInterceptor\" to match the regular expression \'^[a-z][a-zA-Z0-9]*$\'.', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S3010', 'Remove this assignment of \"body\".', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S3305', 'Factory method injection should be used in \"@Configuration\" classes', 'CRITICAL', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S3329', 'Cipher Block Chaining IVs should be unpredictable', 'CRITICAL', 'java', 'VULNERABILITY');
INSERT INTO `sonarrules` VALUES ('java:S3415', 'Assertion arguments should be passed in the correct order', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S3416', 'Loggers should be named for their enclosing classes', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S3436', 'Value-based classes should not be used for locking', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S3551', 'Overrides should match their parent class methods in synchronization', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S3655', 'Optional value should only be accessed after calling isPresent()', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S3776', 'Refactor this method to reduce its Cognitive Complexity from 22 to the 15 allowed.', 'CRITICAL', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S4502', 'Disabling CSRF protections is security-sensitive', 'CRITICAL', 'java', 'SECURITY_HOTSPOT');
INSERT INTO `sonarrules` VALUES ('java:S4507', 'Delivering code in production with debug features activated is security-sensitive', 'MINOR', 'java', 'SECURITY_HOTSPOT');
INSERT INTO `sonarrules` VALUES ('java:S4512', 'Setting JavaBean properties is security-sensitive', 'CRITICAL', 'java', 'SECURITY_HOTSPOT');
INSERT INTO `sonarrules` VALUES ('java:S4524', '\"default\" clauses should be last', 'CRITICAL', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S4635', 'String offset-based methods should be preferred for finding substrings from offsets', 'CRITICAL', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S5738', '\"@Deprecated\" code marked for removal should never be used', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S5831', 'AssertJ configuration should be applied', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S5833', 'AssertJ methods setting the assertion context should come before an assertion', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S5838', 'Chained AssertJ assertions should be simplified to the corresponding dedicated assertion', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S5841', 'AssertJ assertions \"allMatch\" and \"doesNotContains\" should also test for emptiness', 'MINOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S5843', 'Simplify this regular expression to reduce its complexity from 22 to the 20 allowed.', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S5850', 'Alternatives in regular expressions should be grouped when used with anchors', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S5852', 'Using slow regular expressions is security-sensitive', 'CRITICAL', 'java', 'SECURITY_HOTSPOT');
INSERT INTO `sonarrules` VALUES ('java:S5853', 'Consecutive AssertJ \"assertThat\" statements should be chained', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S5854', 'Regexes containing characters subject to normalization should use the CANON_EQ flag', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S5855', 'Regex alternatives should not be redundant', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S5856', 'Regular expressions should be syntactically valid', 'CRITICAL', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S5857', 'Character classes should be preferred over reluctant quantifiers in regular expressions', 'MINOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S5860', 'Names of regular expressions named groups should be used', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S5863', 'Assertions should not compare an object to itself', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S5866', 'Case insensitive Unicode regular expressions should enable the “UNICODE_CASE” flag', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S5868', 'Unicode Grapheme Clusters should be avoided inside regex character classes', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S5869', 'Character classes in regular expressions should not contain the same character twice', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S5958', 'AssertJ \"assertThatThrownBy\" should not be used alone', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S5973', 'Tests should be stable', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S5976', 'Similar tests should be grouped in a single Parameterized test', 'MAJOR', 'java', 'CODE_SMELL');
INSERT INTO `sonarrules` VALUES ('java:S5998', 'Refactor this repetition that can lead to a stack overflow for large inputs.', 'MAJOR', 'java', 'BUG');
INSERT INTO `sonarrules` VALUES ('java:S6353', 'Use concise character class syntax \'\\\\d\' instead of \'[0-9]\'.', 'MINOR', 'java', 'CODE_SMELL');
